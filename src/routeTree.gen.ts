/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as ArticlesImport } from './routes/articles'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ArticlesActionImport } from './routes/articles.action'
import { Route as ArticlesArticleIdImport } from './routes/articles.$articleId'
import { Route as privateDashboardImport } from './routes/(private)/dashboard'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesRoute = ArticlesImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesActionRoute = ArticlesActionImport.update({
  id: '/action',
  path: '/action',
  getParentRoute: () => ArticlesRoute,
} as any)

const ArticlesArticleIdRoute = ArticlesArticleIdImport.update({
  id: '/$articleId',
  path: '/$articleId',
  getParentRoute: () => ArticlesRoute,
} as any)

const privateDashboardRoute = privateDashboardImport.update({
  id: '/(private)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/(private)/dashboard': {
      id: '/(private)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof privateDashboardImport
      parentRoute: typeof rootRoute
    }
    '/articles/$articleId': {
      id: '/articles/$articleId'
      path: '/$articleId'
      fullPath: '/articles/$articleId'
      preLoaderRoute: typeof ArticlesArticleIdImport
      parentRoute: typeof ArticlesImport
    }
    '/articles/action': {
      id: '/articles/action'
      path: '/action'
      fullPath: '/articles/action'
      preLoaderRoute: typeof ArticlesActionImport
      parentRoute: typeof ArticlesImport
    }
  }
}

// Create and export the route tree

interface ArticlesRouteChildren {
  ArticlesArticleIdRoute: typeof ArticlesArticleIdRoute
  ArticlesActionRoute: typeof ArticlesActionRoute
}

const ArticlesRouteChildren: ArticlesRouteChildren = {
  ArticlesArticleIdRoute: ArticlesArticleIdRoute,
  ArticlesActionRoute: ArticlesActionRoute,
}

const ArticlesRouteWithChildren = ArticlesRoute._addFileChildren(
  ArticlesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard': typeof privateDashboardRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/articles/action': typeof ArticlesActionRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard': typeof privateDashboardRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/articles/action': typeof ArticlesActionRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRouteWithChildren
  '/login': typeof LoginRoute
  '/(private)/dashboard': typeof privateDashboardRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/articles/action': typeof ArticlesActionRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/articles'
    | '/login'
    | '/dashboard'
    | '/articles/$articleId'
    | '/articles/action'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/articles'
    | '/login'
    | '/dashboard'
    | '/articles/$articleId'
    | '/articles/action'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/articles'
    | '/login'
    | '/(private)/dashboard'
    | '/articles/$articleId'
    | '/articles/action'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ArticlesRoute: typeof ArticlesRouteWithChildren
  LoginRoute: typeof LoginRoute
  privateDashboardRoute: typeof privateDashboardRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ArticlesRoute: ArticlesRouteWithChildren,
  LoginRoute: LoginRoute,
  privateDashboardRoute: privateDashboardRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/articles",
        "/login",
        "/(private)/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/articles": {
      "filePath": "articles.tsx",
      "children": [
        "/articles/$articleId",
        "/articles/action"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/(private)/dashboard": {
      "filePath": "(private)/dashboard.tsx"
    },
    "/articles/$articleId": {
      "filePath": "articles.$articleId.tsx",
      "parent": "/articles"
    },
    "/articles/action": {
      "filePath": "articles.action.tsx",
      "parent": "/articles"
    }
  }
}
ROUTE_MANIFEST_END */
